(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{427:function(n,t,r){"use strict";r.r(t);var e=r(46),s=Object(e.a)({},(function(){var n=this,t=n.$createElement,r=n._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[r("h2",{attrs:{id:"基于tcp的服务端和客户端"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基于tcp的服务端和客户端"}},[n._v("#")]),n._v(" 基于TCP的服务端和客户端")]),n._v(" "),r("h3",{attrs:{id:"服务端"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务端"}},[n._v("#")]),n._v(" 服务端")]),n._v(" "),r("div",{staticClass:"language-c++ extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('#include <WinSock2.h>\n#include <stdio.h>\n#include <stdlib.h>\n\n#pragma comment(lib, "ws2_32.lib")\n\nint main()\n{\n\tprintf("Server\\n");\n\t//1 初始化网络库\n\t // 加载套接字库\n\tWORD wVersionRequested;\n\tWSADATA wsaData;\n\tint err;\n\n\twVersionRequested = MAKEWORD(2, 2);\n\t// 1、初始化套接字库\n\terr = WSAStartup(wVersionRequested, &wsaData);\n\tif (err != 0)\n\t{\n\t\tprintf("WSAStartup errorNum = %d\\n", GetLastError());\n\t\treturn err;\n\t}\n\n\tif (LOBYTE(wsaData.wVersion) != 2 || HIBYTE(wsaData.wVersion) != 2)\n\t{\n\t\tprintf("LOBYTE errorNum = %d\\n", GetLastError());\n\t\tWSACleanup();\n\t\treturn -1;\n\t}\n\t// 2 安装电话机\n\t // 新建套接字\n\tSOCKET sockSrv = socket(AF_INET, SOCK_STREAM, 0);\n\tif (INVALID_SOCKET == sockSrv)\n\t{\n\t\tprintf("socket errorNum = %d\\n", GetLastError());\n\t\treturn -1;\n\t}\n\t//给变量配置电话号码 IP 任何  端口6000\n\tSOCKADDR_IN addrSrv;\n\taddrSrv.sin_addr.S_un.S_addr = htonl(INADDR_ANY);//host to net long\n\taddrSrv.sin_family = AF_INET;\n\taddrSrv.sin_port = htons(6000);//host to net short\n\t// 3 分配电话号码\n\t // 绑定套接字到本地IP地址，端口号6000\n\tif (SOCKET_ERROR == bind(sockSrv, (SOCKADDR*)&addrSrv, sizeof(SOCKADDR)))\n\t{\n\t\tprintf("bind errorNum = %d\\n", GetLastError());\n\t\treturn -1;\n\t}\n\n\t// 4、监听 listen\n\tif (SOCKET_ERROR == listen(sockSrv, 5))\n\t{\n\t\tprintf("listen errorNum = %d\\n", GetLastError());\n\t\treturn -1;\n\t}\n\n\t// 5、拿起话筒，准备通话\n\tSOCKADDR_IN addrCli;\n\tint len = sizeof(SOCKADDR);\n\n\twhile (TRUE)\n\t{\n\t\t//6、分配一台分机去服务\n\t\tSOCKET sockConn = accept(sockSrv, (SOCKADDR*)&addrCli, &len);\n\t\tchar sendBuf[100] = { 0 };\n\t\tsprintf_s(sendBuf, 100, "Welcome %s to bingo!", inet_ntoa(addrCli.sin_addr));//ipv4字符串转十进制ip地址\n\t\t//发送数据\n\t\tint iLen = send(sockConn, sendBuf, strlen(sendBuf) + 1, 0);\n\t\tif (iLen < 0)\n\t\t{\n\t\t\tprintf("send errorNum = %d\\n", GetLastError());\n\t\t\treturn -1;\n\t\t}\n\t\tchar recvBuf[100] = {0};\n\t\t//接收数据\n\t\tiLen = recv(sockConn, recvBuf, 100, 0);\n\t\tif (iLen < 0)\n\t\t{\n\t\t\tprintf("recv errorNum = %d\\n", GetLastError());\n\t\t\treturn -1;\n\t\t}\n\t\t//打印接收的数据\n\t\tprintf("recvBuf = %s\\n", recvBuf);\n\t\tclosesocket(sockConn);\n\t}\n\t//7 关闭总机\n\tclosesocket(sockSrv);\n\tWSACleanup();\n\tsystem("pause");\n\treturn 0;\n}\n')])])]),r("h3",{attrs:{id:"客户端"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#客户端"}},[n._v("#")]),n._v(" 客户端")]),n._v(" "),r("div",{staticClass:"language-c++ extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('#include <WinSock2.h>\n#include <stdio.h>\n#include <stdlib.h>\n\n#pragma comment(lib, "ws2_32.lib")\n\nint main()\n{\n\tprintf("Client\\n");\n\tchar sendBuf[] = "hello,world";\n\t//1 初始化网络库\n\t // 加载套接字库\n\tWORD wVersionRequested;\n\tWSADATA wsaData;\n\tint err;\n\n\twVersionRequested = MAKEWORD(2, 2);\n\t// 1、初始化套接字库\n\terr = WSAStartup(wVersionRequested, &wsaData);\n\tif (err != 0)\n\t{\n\t\tprintf("WSAStartup errorNum = %d\\n", GetLastError());\n\t\treturn err;\n\t}\n\n\tif (LOBYTE(wsaData.wVersion) != 2 || HIBYTE(wsaData.wVersion) != 2)\n\t{\n\t\tprintf("LOBYTE errorNum = %d\\n", GetLastError());\n\t\tWSACleanup();\n\t\treturn -1;\n\t}\n\t// 2 安装电话机\n\t // 新建套接字\n\tSOCKET sockCli = socket(AF_INET, SOCK_STREAM, 0);\n\tif (INVALID_SOCKET == sockCli)\n\t{\n\t\tprintf("socket errorNum = %d\\n", GetLastError());\n\t\treturn -1;\n\t}\n\tSOCKADDR_IN addrSrv;\n\taddrSrv.sin_addr.S_un.S_addr = inet_addr("192.168.8.253");//字符串转ipv4地址\n\taddrSrv.sin_family = AF_INET;\n\taddrSrv.sin_port = htons(6000);\n\n\t// 3 连接服务器\n\tif (SOCKET_ERROR == connect(sockCli, (SOCKADDR*)&addrSrv, sizeof(SOCKADDR)))\n\t{\n\t\tprintf("connect errorNum = %d\\n", GetLastError());\n\t\treturn -1;\n\t}\n\t// 4 接收和发送数据\n\tchar recvBuf[100] = {0};\n\tint iLen = recv(sockCli, recvBuf, 100, 0);\n\tif (iLen < 0)\n\t{\n\t\tprintf("recv errorNum = %d\\n", GetLastError());\n\t\treturn -1;\n\t}\n\tprintf("Client recvBuf = %s\\n", recvBuf);\n\n\t// 发送数据\n\tiLen = send(sockCli, sendBuf, strlen(sendBuf) + 1, 0);\n\tif (iLen < 0)\n\t{\n\t\tprintf("send errorNum = %d\\n", GetLastError());\n\t\treturn -1;\n\t}\n\t// 关闭套接字\n\tclosesocket(sockCli);\n\tWSACleanup();\n\tsystem("pause");\n\treturn 0;\n}\n')])])]),r("h2",{attrs:{id:"基于udp的服务端和客户端"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基于udp的服务端和客户端"}},[n._v("#")]),n._v(" 基于UDP的服务端和客户端")]),n._v(" "),r("h3",{attrs:{id:"服务端-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#服务端-2"}},[n._v("#")]),n._v(" 服务端")]),n._v(" "),r("div",{staticClass:"language-c++ extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('#include <WinSock2.h>\n#include <iostream>\n\n#pragma comment(lib, "ws2_32.lib")\nint main()\n{\n    // 初始化套接字库\n    WORD wVersion;\n    WSADATA wsaData;\n    int err;\n\n    wVersion = MAKEWORD(1, 1);\n    err = WSAStartup(wVersion, &wsaData);\n    if (err != 0)\n    {\n        return err;\n    }\n\n    if (LOBYTE(wsaData.wVersion) != 1 || HIBYTE(wsaData.wVersion) != 1)\n    {\n        WSACleanup();\n        return -1;\n    }\n\n    // 创建套接字\n    SOCKET sockSrv = socket(AF_INET, SOCK_DGRAM, 0);\n\n    SOCKADDR_IN addrSrv;\n    addrSrv.sin_addr.S_un.S_addr = htonl(INADDR_ANY);\n    addrSrv.sin_family = AF_INET;\n    addrSrv.sin_port = htons(6001);\n\n    // 绑定套接字\n    bind(sockSrv, (SOCKADDR*)&addrSrv, sizeof(SOCKADDR));\n\n    // 等待并接收数据\n    SOCKADDR_IN addrCli;\n    int len = sizeof(SOCKADDR_IN);\n\n    char recvBuf[100];\n    char sendBuf[100];\n    while (true)\n    {\n        recvfrom(sockSrv, recvBuf, 100, 0, (SOCKADDR*)&addrCli, &len);\n        std::cout << recvBuf << std::endl;\n\n        sprintf_s(sendBuf, 100, "Ack %s", recvBuf);\n        sendto(sockSrv, sendBuf, strlen(sendBuf) + 1, 0, (SOCKADDR*)&addrCli, len);\n    }\n\n    closesocket(sockSrv);\n    WSACleanup();\n\n    system("pause");\n    return 0;\n}\n')])])]),r("h3",{attrs:{id:"客户端-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#客户端-2"}},[n._v("#")]),n._v(" 客户端")]),n._v(" "),r("div",{staticClass:"language-c++ extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('#include <WinSock2.h>\n#include <iostream>\n\n#pragma comment(lib, "ws2_32.lib")\nint main()\n{\n    // 加载套接字库\n    WORD wVersion;\n    WSADATA wsaData;\n    int err;\n    wVersion = MAKEWORD(1, 1);\n    err = WSAStartup(wVersion, &wsaData);\n    if (err != 0)\n    {\n        return err;\n    }\n    if (LOBYTE(wsaData.wVersion) != 1 || HIBYTE(wsaData.wVersion) != 1)\n    {\n        WSACleanup();\n        return -1;\n    }\n\n    // 创建套接字\n    SOCKET sockCli = socket(AF_INET, SOCK_DGRAM, 0);\n    SOCKADDR_IN addrSrv;\n    addrSrv.sin_addr.S_un.S_addr = inet_addr("127.0.0.1");\n    addrSrv.sin_port = htons(6001);\n    addrSrv.sin_family = AF_INET;\n\n    int len = sizeof(SOCKADDR);\n    char sendBuf[] = "hello";\n    char recvBuf[100];\n\n    //发送数据\n    sendto(sockCli, sendBuf, strlen(sendBuf) + 1, 0, (SOCKADDR*)& addrSrv, len);\n\n    recvfrom(sockCli, recvBuf, 100, 0, (SOCKADDR*)& addrSrv, &len);\n\n    std::cout << recvBuf << std::endl;\n\n    closesocket(sockCli);\n\n    system("pause");\n    return 0;\n}\n\n')])])])])}),[],!1,null,null,null);t.default=s.exports}}]);