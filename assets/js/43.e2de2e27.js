(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{457:function(t,r,a){"use strict";a.r(r);var e=a(46),n=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-函数对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-函数对象"}},[t._v("#")]),t._v(" 1 函数对象")]),t._v(" "),a("p",[t._v("重载函数调用操作符的类，其对象称为函数对象，即它们是行为类似函数的对象，也叫仿函数。")]),t._v(" "),a("p",[t._v("注意：函数对象（仿函数）是一个类，不是一个函数。\n函数对象重载了“()”操作符使得它可以像函数一样调用。")]),t._v(" "),a("h2",{attrs:{id:"_2-遍历算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-遍历算法"}},[t._v("#")]),t._v(" 2 遍历算法")]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("for_each(InputIterator first, InputIterator last, Function fn);\n\ntransform (InputIterator first1, InputIterator last1, OutputIterator result, UnaryOperation op);\ntransform (InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, BinaryOperation binary_op);                            \n")])])])])}),[],!1,null,null,null);r.default=n.exports}}]);