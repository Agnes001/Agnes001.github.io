(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{447:function(t,n,e){"use strict";e.r(n);var r=e(46),a=Object(r.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"获取文件夹下所有文件的名称"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取文件夹下所有文件的名称"}},[t._v("#")]),t._v(" 获取文件夹下所有文件的名称")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//传入的值为 "E:\\\\BaiduNetdiskDownload"\nvoid getFiles(const char* szPath)\n{\n\tWIN32_FIND_DATA findFileData; //表示文件\n\tHANDLE hListFile; //文件句柄\n\n\tchar szFilePath[MAX_PATH]{ 0 };\n\tstrcpy(szFilePath, szPath);\n\tstrcat(szFilePath, "\\\\*");\n\n\thListFile = FindFirstFile(szFilePath, &findFileData);\n\n\tdo\n\t{\n\t\tchar myPath[MAX_PATH]{ 0 };\n\t\tif ((findFileData.dwFileAttributes & FILE_ATTRIBUTE_HIDDEN)==0)\n\t\t{\n\t\t\tstrcpy(myPath, findFileData.cFileName);\n\t\t\tprintf("path = %s\\n", myPath);\n\t\t}\n\t} while (FindNextFile(hListFile, &findFileData))\n}\n')])])]),e("h2",{attrs:{id:"utf8togb-gbtoutf8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#utf8togb-gbtoutf8"}},[t._v("#")]),t._v(" UTF8ToGB GBToUTF8")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// windows下的转换\n#include <string>\n#include <Windows.h>\n \n//UTF-8到GB2312的转换\nchar* UTF8ToGB(const char* utf8)\n{\n\tint len = MultiByteToWideChar(CP_UTF8, 0, utf8, -1, NULL, 0);\n\twchar_t* wstr = new wchar_t[len+1];\n\tmemset(wstr, 0, len+1);\n\tMultiByteToWideChar(CP_UTF8, 0, utf8, -1, wstr, len);\n\tlen = WideCharToMultiByte(CP_ACP, 0, wstr, -1, NULL, 0, NULL, NULL);\n\tchar* str = new char[len+1];\n\tmemset(str, 0, len+1);\n\tWideCharToMultiByte(CP_ACP, 0, wstr, -1, str, len, NULL, NULL);\n\tif(wstr) delete[] wstr;\n\treturn str;\n}\n//GB2312到UTF-8的转换\nchar* GBToUTF8(const char* gb2312)\n{\n\tint len = MultiByteToWideChar(CP_ACP, 0, gb2312, -1, NULL, 0);\n\twchar_t* wstr = new wchar_t[len+1];\n\tmemset(wstr, 0, len+1);\n\tMultiByteToWideChar(CP_ACP, 0, gb2312, -1, wstr, len);\n\tlen = WideCharToMultiByte(CP_UTF8, 0, wstr, -1, NULL, 0, NULL, NULL);\n\tchar* str = new char[len+1];\n\tmemset(str, 0, len+1);\n\tWideCharToMultiByte(CP_UTF8, 0, wstr, -1, str, len, NULL, NULL);\n\tif(wstr) delete[] wstr;\n\treturn str;\n}\n")])])]),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//C语言编码转换gb2312 to utf8，utf8 to gb2312 代码，GCC编译，支持Windows、Linux\n#include <stdio.h>\n#include <stdlib.h>\n#include <stddef.h>\n#include <string.h>\n#include <unistd.h>\n#include <iconv.h>\n#define OUTLEN 255\n\nmain()\n{\n    char *in_utf8 = "姝ｅ?ㄥ??瑁?";\n    char *in_gb2312 = "你是谁";\n    char out[OUTLEN];\n    int rc; \n\n    //unicode码转为gb2312码\n    rc = u2g(in_utf8,strlen(in_utf8),out,OUTLEN);\n    //printf("unicode--\x3egb2312 out=%sn",out);\n\n    //gb2312码转为unicode码\n    rc = g2u(in_gb2312,strlen(in_gb2312),out,OUTLEN);\n    printf("gb2312--\x3eunicode out=%sn",out);\n}\n\n/*代码转换:从一种编码转为另一种编码*/\nint code_convert(char *from_charset,char *to_charset,char *inbuf,int inlen,char *outbuf,int outlen)\n{\n    iconv_t cd;\n    int rc;\n    char **pin = &inbuf;\n    char **pout = &outbuf;\n     \n    cd = iconv_open(to_charset,from_charset);\n    if (cd==0) return -1;\n    memset(outbuf,0,outlen);\n    if (iconv(cd,pin,&inlen,pout,&outlen)==-1) return -1;\n    iconv_close(cd);\n    return 0;\n}\n/*UNICODE码转为GB2312码*/\nint u2g(char *inbuf,int inlen,char *outbuf,int outlen)\n{\n    return code_convert("utf-8","gb2312",inbuf,inlen,outbuf,outlen);\n}\n/*GB2312码转为UNICODE码*/\nint g2u(char *inbuf,size_t inlen,char *outbuf,size_t outlen)\n{\n    return code_convert("gb2312","utf-8",inbuf,inlen,outbuf,outlen);\n}\n')])])]),e("h2",{attrs:{id:"添加到启动项-写入注册表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加到启动项-写入注册表"}},[t._v("#")]),t._v(" 添加到启动项/写入注册表")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('void AddToSystem() \n{ \n\tHKEY hKEY; \n\tchar CurrentPath[MAX_PATH]; \n\tchar SysPath[MAX_PATH]; \n\tlong ret = 0; \n\tLPSTR FileNewName; \n\tLPSTR FileCurrentName; \n\tDWORD type = REG_SZ; \n\tDWORD size = MAX_PATH; \n\tLPCTSTR Rgspath = "Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run"; //regedit win + R \n\tGetSystemDirectory(SysPath, size); \n\tGetModuleFileName(NULL, CurrentPath, size); \n\t//Copy File \n\tFileCurrentName = CurrentPath;\n\tFileNewName = lstrcat(SysPath, "\\\\Steal.exe");\n\tstruct _finddata_t Steal; \n\tprintf("ret1 = %d,FileNewName = %s\\n", ret, FileNewName); \n\tif (_findfirst(FileNewName, &Steal) != -1) \n\t\treturn;//已经安装！ \n\tprintf("ret2 = %d\\n", ret); \n\tint ihow = MessageBox(0, "该程序只允许用于合法的用途！\\n 继续运行该程序将使这台机器 处于被监控的状态！\\n 如果您不想这样，请按“取消”按钮退出。\\n 按下“是”按钮该程序将被复制 到您的机器上，并随系统启动自动运行。\\n 按下“否”按钮，程序只运行一次，不会在您的系统内留下 任何东西。", "警告", MB_YESNOCANCEL | MB_ICONWARNING | MB_TOPMOST); \n\tif (ihow == IDCANCEL) \n\t\texit(0);\n\tif (ihow == IDNO) \n\treturn;//只运行一次 \n\t//复制文件 \n\tret = CopyFile(FileCurrentName, FileNewName, TRUE); \n\tif (!ret) \n\t{ \n\t\treturn;\n\t}\n\t//加入注册表 \n\tprintf("ret = %d\\n", ret); \n\tret = RegOpenKeyEx(HKEY_LOCAL_MACHINE, Rgspath, 0, KEY_WRITE, &hKEY); \n\tif (ret != ERROR_SUCCESS)\n\t{ \n\t\tRegCloseKey(hKEY); return; \n\t}\n\t//Set Key\n\tret = RegSetValueEx(hKEY, "Steal", NULL, type, (const unsigned char*)FileNewName, size); \n\tif (ret != ERROR_SUCCESS) \n\t{ \n\t\tRegCloseKey(hKEY); \n\t\treturn; \n\t}\n\tRegCloseKey(hKEY);\n}\n')])])]),e("h2",{attrs:{id:"隐藏自身程序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#隐藏自身程序"}},[t._v("#")]),t._v(" 隐藏自身程序")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("void HideMyself() \n{ \n\t// 拿到当前的窗口句柄 \n\tHWND hwnd = GetForegroundWindow(); \n\tShowWindow(hwnd, SW_HIDE); \n}\n")])])]),e("h2",{attrs:{id:"错误处理函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#错误处理函数"}},[t._v("#")]),t._v(" 错误处理函数")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("void ErrorHanding(const char *msg) \n{ \n\tfputs(msg, stderr); \n\tfputc('\\n', stderr); \n\texit(1);\n}\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);