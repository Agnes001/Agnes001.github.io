(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{429:function(t,s,a){"use strict";a.r(s);var n=a(46),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("参考资料：https://www.taodocs.com/p-285094830.html\n路由器：路由表和NAT映射表")]),t._v(" "),a("ul",[a("li",[t._v("路由表 > 路由表中含有网络周边的拓扑信息。路由表建立的主要目标是为了实现路由协议和静态路由选择。")]),t._v(" "),a("li",[t._v("NAT映射表 > 内网IP对应的公网IP")])]),t._v(" "),a("blockquote",[a("p",[t._v("打洞是服务器参与的\n一般情况下：一个客户端到服务器 服务器到另一个客户端\n路由器默认的保护机制，对于陌生IP第一次发送数据包，会把数据包屏蔽或丢弃；")])]),t._v(" "),a("p",[t._v("TCP协议注重数据的传输。http协议着重于数据的解释。")]),t._v(" "),a("h2",{attrs:{id:"分层模型与协议格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分层模型与协议格式"}},[t._v("#")]),t._v(" 分层模型与协议格式")]),t._v(" "),a("p",[t._v("应用层"),a("br"),t._v("\n传输层"),a("br"),t._v("\n网络层"),a("br"),t._v("\n数据链路层    --以太网协议")]),t._v(" "),a("p",[t._v("以太网的最大传输单元(MTU)的最大值为1500，数据包大于拨号链路的MTU，则需要对数据包进行分片。")]),t._v(" "),a("h2",{attrs:{id:"socket编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket编程"}},[t._v("#")]),t._v(" socket编程")]),t._v(" "),a("h3",{attrs:{id:"套接字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#套接字"}},[t._v("#")]),t._v(" 套接字")]),t._v(" "),a("p",[t._v("套接字有两端，数据发送端和数据接收端")]),t._v(" "),a("p",[t._v("IP地址：在网络环境中唯一标识一台主机\n端口号：在主机中唯一标识一个进程\nIP+Port：在网络环境中唯一标识一个进程（socket）")]),t._v(" "),a("p",[t._v("Linux文件的类型：\n占用空间的：普通文件、目录、软连接\n不占用空间的：字符文件、块文件、管道文件、套接字")]),t._v(" "),a("p",[t._v("管道有两端，分别为写入和读取，fd[1]和fd[0]，半双工")]),t._v(" "),a("p",[t._v("套接字fd有两块缓冲区(读和写)，全双工")]),t._v(" "),a("h3",{attrs:{id:"网络字节序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络字节序"}},[t._v("#")]),t._v(" 网络字节序")]),t._v(" "),a("p",[t._v("大端：低存高，高存低  低地址存高位\n小端：低存低，高存高")]),t._v(" "),a("p",[t._v("TCP/IP协议规定，网络数据流采用大端字节序")]),t._v(" "),a("p",[t._v("int a = 0x12345678;\n大    小\n1003    78    12\n1002    56    34\n1001    34    56\n1000    12    78")]),t._v(" "),a("p",[t._v("网络字节序和主机字节序的转换函数")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<arpa/inet.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//h表示host, n表示network, l表示32位长整数, s表示16位短整数")]),t._v("\nuint32_t "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("htonl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uint32_t hostlong"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nuint16_t "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("htons")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uint16_t hostshort"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nuint32_t "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ntohl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uint32_t netlong"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nuint16_t "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ntohs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uint16_t netshort"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("IP地址转换函数")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<arpa/inet.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//af AF_INET/AF_INET6")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inet_pton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" af"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" dst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inet_ntop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" af"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" dst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" socklen_t size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"sockaddr-数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sockaddr-数据结构"}},[t._v("#")]),t._v(" sockaddr 数据结构")]),t._v(" "),a("p",[t._v("#include <netinet/in.h>\nstruct sockaddr是最早定义的，函数中亦使用此类型\nstruct sockaddr_in是衍生出来的，定义时使用此类型，sin_family,sin_port,sin_sddr.s_addr")]),t._v(" "),a("h2",{attrs:{id:"网路套接字函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网路套接字函数"}},[t._v("#")]),t._v(" 网路套接字函数")]),t._v(" "),a("p",[t._v("unistd.h  包含了许多系统服务的函数原型，例如read函数、write函数和getpid函数等。")]),t._v(" "),a("h3",{attrs:{id:"socket函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket函数"}},[t._v("#")]),t._v(" socket函数")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("socket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" protocol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"bind函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bind函数"}},[t._v("#")]),t._v(" bind函数")]),t._v(" "),a("p",[t._v("服务器程序所监听的网络地址和端口号通常时不变的，客户端得知服务器程序的地址和端口号后就可以向服务器发起连接，因此服务器需要调用bind绑定一个固定的网络地址和端口号。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sockfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" socklen_t addrlen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//bind的作用是将参数sockfd和addr绑定在一起，使sockfd这个用于网络通讯的文件描述符监听addr所描述的地址和端口号。")]),t._v("\n")])])]),a("h3",{attrs:{id:"listen函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#listen函数"}},[t._v("#")]),t._v(" listen函数")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sockfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" backlog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//listen指定监听上限数，同时允许多少个客户端跟我建立连接")]),t._v("\n")])])]),a("h3",{attrs:{id:"accept函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accept函数"}},[t._v("#")]),t._v(" accept函数")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sockfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" socklen_t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" addrlen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"connect函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connect函数"}},[t._v("#")]),t._v(" connect函数")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/types.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys/socket.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sockfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sockaddr")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" socklen_t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" addrlen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("make\ngcc server.c -o  server -Wall -g")]),t._v(" "),a("p",[t._v("-I目录 指定头文件目录\n-c 只编译，生成.o文件，不进行链接\n-g 包含调试信息\n-On n=0∼3 编译优化，n越大优化得越多\n-Wall 提示更多警告信息\n-D DEF 编译时定义宏\n-E 生成预处理文件\n-M 生成.c文件与头文件依赖关系以用于Makefile，包括系统库的头文件\n-MM 生成.c文件与头文件依赖关系以用于Makefile，不包括系统库的头文件")]),t._v(" "),a("p",[t._v("make clean\n测试  nc 127.0.0.1 6666 脑残命令 哈哈\nldd")]),t._v(" "),a("h2",{attrs:{id:"tcp三次握手建立连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手建立连接"}},[t._v("#")]),t._v(" TCP三次握手建立连接")]),t._v(" "),a("h2",{attrs:{id:"mtu、mss、半关闭"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mtu、mss、半关闭"}},[t._v("#")]),t._v(" MTU、mss、半关闭")]),t._v(" "),a("h2",{attrs:{id:"错误处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误处理"}},[t._v("#")]),t._v(" 错误处理")]),t._v(" "),a("p",[t._v("readn\nreadline\n一般思想")]),t._v(" "),a("h2",{attrs:{id:"并发服务器模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发服务器模型"}},[t._v("#")]),t._v(" 并发服务器模型")]),t._v(" "),a("p",[t._v("多进程并发\n多线程并发")])])}),[],!1,null,null,null);s.default=e.exports}}]);