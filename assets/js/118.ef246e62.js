(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{481:function(t,n,s){"use strict";s.r(n);var a=s(46),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("https://www.imooc.com/article/20411")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加提交任务到暂存区")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加提交任务到版本库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commit info"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看提交记录")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看工作区和暂存区的差异")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看暂存区和版本库的差异")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" --cached\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看工作区和版本库的差异")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" HEAD\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 简短输出，第一个M表示暂存区和版本库内容不一致；第二个M表示工作区和暂存区内容不一致")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status -s\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 暂存区的目录树被版本库里的内容重置，但是工作区不受影响。放弃之前git add的提交。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 工作区和暂存区的目录树被版本库里的内容重置。放弃之前git add和个git commit的提交。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard SHA1号/HEAD\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进行合并操作")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 向远程版本库origin的master分支提交")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin master\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把远程版本库的master分支拉到本地，数据同步服务器端")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看本地分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建并切换分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master -b dev\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换到newbranch分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout newbranch\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除分支，如没合并，则失败")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d newbranch\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 强制删除分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -D newbranch\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看远程地址")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将当前修改保存到暂存区")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示暂存区的列表")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清除全部的暂存区")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将第一个暂存区的内容弹出，还原其修改。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把暂存区的file.txt文件恢复到工作区，覆盖工作区之前的修改。checkout命令主要是把历史某个版本检出到工作区。慎用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -- file.txt\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" file.txt\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看文件提交历史信息，方便定位bug")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" blame file.txt\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看所包含的引用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show-ref\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 制作里程碑")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my first tag"')]),t._v(" mytagv1.0\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看mytagv1.0提交信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cat-file tag mytagv1.0\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看所有tag，n1显示一行信息")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -l -n1\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除tag")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -d mytagv1.0\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 先删除本地分支，再删除远程版本库对应分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin :newbranch\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看本地引用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show-ref\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建远程版本库")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" new-remote file:///path/hello-1.git\n\n")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);