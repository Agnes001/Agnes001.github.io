(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{445:function(t,a,n){"use strict";n.r(a);var e=n(46),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("https://www.cnblogs.com/xyf327/p/15008168.html")]),t._v(" "),n("p",[t._v("https://zhuanlan.zhihu.com/p/368002294")]),t._v(" "),n("p",[t._v("C++11引入了5个头文件来支持多线程编程，是"),n("atomic",[t._v("/"),n("thread",[t._v("/"),n("mutex",[t._v("/<condition_variable>/"),n("future",[t._v("\n< thread > : 提供线程创建及管理的函数或类接口；\n< mutex > : C++11 互斥量Mutex。在多线程环境中，有多个线程竞争同一个公共资源，就很容易引发线程安全的问题\n< condition_variable > : 允许一定量的线程等待（可以定时）被另一线程唤醒，然后再继续执行；\n< future > : 提供了一些工具来获取异步任务（即在单独的线程中启动的函数）的返回值，并捕捉其所抛出的异常\n< atomic >:为细粒度的原子操作（不能被处理器拆分处理的操作）提供组件，允许无锁并发编程。")])],1)],1)],1)],1),t._v(" "),n("h2",{attrs:{id:"thread的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#thread的使用"}},[t._v("#")]),t._v(" thread的使用")]),t._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('#include <iostream>\n#include <thread>\nusing namespace std;\nvoid thread_task()\n{\n    cout << "hello thread" << endl;\n}\n\nint main()\n{\n    thread t(thread_task);\n    t.join();\n    cout << "thread end" << endl;\n    return 0;\n}\n')])])]),n("h2",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])])])}),[],!1,null,null,null);a.default=r.exports}}]);