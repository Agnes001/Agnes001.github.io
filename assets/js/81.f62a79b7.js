(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{412:function(a,t,s){"use strict";s.r(t);var n=s(46),r=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("hr"),a._v(" "),s("p",[a._v("title: linux-command\ndate: 2022-01-18 10:00:00\npermalink: /technology/linux/command\ncategories:")]),a._v(" "),s("ul",[s("li",[a._v("Linux")]),a._v(" "),s("li",[a._v("command\ntags:")]),a._v(" "),s("li",[a._v("command")])]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("谦虚、严谨、勤思、善问、实践"),s("br"),a._v("\nhttps://www.runoob.com/linux/linux-command-manual.html")]),a._v(" "),s("h2",{attrs:{id:"_1-shell"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-shell"}},[a._v("#")]),a._v(" 1 shell")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看当前系统下有哪些shell")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" /etc/shells\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看当前正在使用的shell")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$SHELL")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 历史记录")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("history")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 主键盘快捷键")]),a._v("\nctrl+p       previous\nctrl+n       next\nctrl+b       backward\nctrl+f       forword\nctrl+d       delete光标后面的\nctrl+a       the first letter\nctrl+e       end\nBackspace    delete光标前面的\nctrl+u       delete光标前面的所有\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("vi")]),a._v(" /etc/profile\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("source")]),a._v(" /etc/profile\n")])])]),s("h2",{attrs:{id:"_2-目录和文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-目录和文件"}},[a._v("#")]),a._v(" 2 目录和文件")]),a._v(" "),s("p",[a._v("ubuntu没有盘符这个概念，只有一个根目录/，所有文件都在它下面")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("/ 根目录\nbin //系统可执行程序，如命令\nboot //内核和启动程序，所有和启动相关的文件都保存在这里\ngrub //引导器相关文件\ndev //设备文件\netc //系统软件的启动和配置文件，系统在启动过程中需要读取的文件都在这个目录。如LILO参数、用\n户账户和密码。\nhome //用户的主目录。下面是自己定义的用户名的文件夹\nlib //系统程序库文件,这个目录里存放着系统最基本的动态链接共享库，类似于Windows下的system32\n目录，几乎所有的应用程序都需要用到这些共享库。\nmedia //挂载媒体设备，如光驱、U盘等\nmnt //目录是让用户临时挂载别的文件系统，如挂载Windows下的某个分区，ubuntu默认还是挂载在/media\n目录。\nopt //可选的应用软件包（很少使用）\nproc //这个目录是系统内存的映射，我们可以直接访问这个目录来获取系统信息。也就是说，这个目录的内容不在硬盘上而是在内存里。\nsbin //管理员系统程序\nselinux\nsrv\nsys //udev用到的设备目录树，/sys反映你机器当前所接的设备\ntmp //临时文件夹\nusr //这是个最庞大的目录，我们要用到的很多应用程序和文件几乎都存放在这个目录下。\nbin // 应用程序\ngame //游戏程序\ninclude\nlib //应用程序的库文件\nlib64\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("local")]),a._v(" //包含用户程序等\nsbin //管理员应用程序\n")])])]),s("h3",{attrs:{id:"ls"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ls"}},[a._v("#")]),a._v(" ls")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("option"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n-a 列出隐藏文件，文件中以“.”开头的均为隐藏文件，如：~/.bashrc\n-l 列出文件的详细信息\n-R 连同子目录中的内容一起列出\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 文件类型说明 ls -l 显示信息的第一个字符")]),a._v("\n- 普通文件\nd 目录\nl 符号链接\nb 块设备文件\nc 字符设备文件\ns socket文件，网络套接字\np 管道\n")])])]),s("h3",{attrs:{id:"which"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#which"}},[a._v("#")]),a._v(" which")]),a._v(" "),s("p",[a._v("查看指定命令所在路径\nwhich ls")]),a._v(" "),s("h3",{attrs:{id:"mkdir-rmdir"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mkdir-rmdir"}},[a._v("#")]),a._v(" mkdir & rmdir")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# -p 确保目录名称存在，不存在的就建一个")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("-p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" dirName\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# -p 连同父目录一起删除")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rmdir")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("-p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" dirName\n")])])]),s("h3",{attrs:{id:"rm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rm"}},[a._v("#")]),a._v(" rm")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除文件 -i 提示")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("file")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除目录")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("dir")]),a._v(" -rf\n")])])]),s("h3",{attrs:{id:"more"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#more"}},[a._v("#")]),a._v(" more")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("more")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("-dlfpcsu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("-num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("+/pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("+linenum"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("  FILE…\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看文本文件的内容，屏幕显示完一屏就等待用户按下任意键再滚动到下一屏，如果中途不想继续看下去了，可以按Ctrl+C或q终止显示。")]),a._v("\n-num 一次显示的行数\n-d 提示使用者，在画面下方显示 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("Press space to continue, "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'q'")]),a._v(" to quit."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" ，如果使用者按错键，则会显示 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("Press "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'h'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" instructions."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" 而不是 "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'哔'")]),a._v(" 声\n-l 取消遇见特殊字元 ^L（送纸字元）时会暂停的功能\n-f 计算行数时，以实际上的行数，而非自动换行过后的行数（有些单行字数太长的会被扩展为两行或两行以上）\n-p 不以卷动的方式显示每一页，而是先清除萤幕后再显示内容\n-c 跟 -p 相似，不同的是先显示内容再清除其他旧资料\n-s 当遇到有连续两行以上的空白行，就代换为一行的空白行\n-u 不显示下引号 （根据环境变数 "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("TERM")]),a._v(" 指定的 terminal 而有所不同）\n+/pattern 在每个文档显示前搜寻该字串（pattern），然后从该字串之后开始显示\n+num 从第 num 行开始显示\n")])])]),s("h3",{attrs:{id:"ln"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ln"}},[a._v("#")]),a._v(" ln")]),a._v(" "),s("p",[a._v("链接有两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic\nLink）。建立硬链接时，链接文件和被链接文件必须位于同一个文件系统中，并且不能建立\n指向目录的硬链接。而对符号链接，则不存在这个问题。默认情况下，ln产生硬链接。如果\n给ln命令加上-s选项，则建立符号链接。举例如下，注意ls -l列出文件的硬链接数和字节\n数：\n硬链接不占用空间")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("硬链接：\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("touch")]),a._v(" hello\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" hello word_h\n软链接：\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -s hello word_s\n硬链接找磁盘上对应的文件\n")])])]),s("h3",{attrs:{id:"df"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#df"}},[a._v("#")]),a._v(" df")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# df查看磁盘使用情况")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("df")]),a._v(" --block-size"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("GB\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("df")]),a._v(" --block-size"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("MB\n")])])]),s("h2",{attrs:{id:"文件属性和文件用户组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件属性和文件用户组"}},[a._v("#")]),a._v(" 文件属性和文件用户组")]),a._v(" "),s("h3",{attrs:{id:"whoami"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#whoami"}},[a._v("#")]),a._v(" whoami")]),a._v(" "),s("p",[a._v("查看当前登陆用户")]),a._v(" "),s("h3",{attrs:{id:"chmod"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#chmod"}},[a._v("#")]),a._v(" chmod")]),a._v(" "),s("p",[a._v("目录必须有执行权限\n文字设定法\nchmod [who] [+|-|=] [mode] 文件名\n操作对象who可是下述字母中的任一个或者它们的组合：\nu 表示“用户（user）”，即文件或目录的所有者。\ng 表示“同组（group）用户”，即与文件属主有相同组ID的所有用户。\no 表示“其他（others）用户”。\na 表示“所有（all）用户”。它是系统默认值。\n操作符号可以是：")]),a._v(" "),s("ul",[s("li",[a._v("添加某个权限。")])]),a._v(" "),s("ul",[s("li",[a._v("取消某个权限。\n= 赋予给定权限并取消其他所有权限（如果有的话）。\n设置mode所表示的权限可用下述字母的任意组合：\nr 可读。\nw 可写。\nx 可执行。")])]),a._v(" "),s("p",[a._v("数字设定法\nchmod [mode] 文件名\n我们必须首先了解用数字表示的属性的含义：\n0表示没有权限，\n1表示可执行权限，\n2表示可写权限，\n4表示可读权限")]),a._v(" "),s("h3",{attrs:{id:"chown"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#chown"}},[a._v("#")]),a._v(" chown")]),a._v(" "),s("p",[a._v("比如把一个文件改为itcast用户和nogroup用户组所有\n$ sudo chown itcast:nogroup file1")]),a._v(" "),s("h3",{attrs:{id:"chgrp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#chgrp"}},[a._v("#")]),a._v(" chgrp")]),a._v(" "),s("p",[a._v("chgrp GROUP FILE")]),a._v(" "),s("h2",{attrs:{id:"查找与检索"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查找与检索"}},[a._v("#")]),a._v(" 查找与检索")]),a._v(" "),s("h3",{attrs:{id:"find"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#find"}},[a._v("#")]),a._v(" find")]),a._v(" "),s("p",[a._v("根据文件名查找\nfind . -name 'file*'\n根据文件大小查找\nfind . -size +10k\n根据文件类型查找\nfind . -type d/f/b/c/s/p/l")]),a._v(" "),s("h3",{attrs:{id:"grep"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#grep"}},[a._v("#")]),a._v(" grep")]),a._v(" "),s("p",[a._v('按文件内容查找\ngrep -r "查找的内容" filepath')]),a._v(" "),s("h2",{attrs:{id:"安装卸载软件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装卸载软件"}},[a._v("#")]),a._v(" 安装卸载软件")]),a._v(" "),s("h3",{attrs:{id:"apt-get"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#apt-get"}},[a._v("#")]),a._v(" apt-get")]),a._v(" "),s("p",[a._v("更新源服务器列表 https://blog.csdn.net/davidhzq/article/details/102634325\nsudo vi /etc/apt/sources.list\n更新完服务器列表后需要更新下源\nsudo apt-get update 更新软件列表  存储着能够安装的软件和下载地址\nsudo apt-get install package 安装包\nsudo apt-get remove package 删除包\nsudo apt-cache search package 搜索软件包\nsudo apt-cache show package 获取包的相关信息，如说明、大小、版本等\nsudo apt-get install package --reinstall 重新安装包\nsudo apt-get -f install 修复安装\nsudo apt-get remove package --purge 删除包，包括配置文件等\nsudo apt-get build-dep package 安装相关的编译环境\nsudo apt-get upgrade 更新已安装的包\nsudo apt-get dist-upgrade 升级系统\nsudo apt-cache depends package 了解使用该包依赖那些包\nsudo apt-cache rdepends package 查看该包被哪些包依赖\nsudo apt-get source package 下载该包的源代码\nsudo apt-get clean 清理无用的包/缓存\nsudo apt-get check 检查是否有损坏的依赖")]),a._v(" "),s("h3",{attrs:{id:"deb包安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#deb包安装"}},[a._v("#")]),a._v(" deb包安装")]),a._v(" "),s("p",[a._v("安装deb软件包命令： sudo dpkg -i xxx.deb\n删除软件包命令： sudo dpkg -r xxx.deb")]),a._v(" "),s("h3",{attrs:{id:"原码安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原码安装"}},[a._v("#")]),a._v(" 原码安装")]),a._v(" "),s("ol",[s("li",[a._v("解压缩源代码包")]),a._v(" "),s("li",[a._v("cd dir")]),a._v(" "),s("li",[a._v("./configure\n检测文件是否缺失，创建Makefile,检测编译环境")]),a._v(" "),s("li",[a._v("make\n编译源码，生成库和可执行程序")]),a._v(" "),s("li",[a._v("sudo make install\n把库和可执行程序，安装到系统路径下")]),a._v(" "),s("li",[a._v("sudo make distclean\n删除和卸载软件")])]),a._v(" "),s("h2",{attrs:{id:"磁盘管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#磁盘管理"}},[a._v("#")]),a._v(" 磁盘管理")]),a._v(" "),s("h3",{attrs:{id:"mount-挂载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mount-挂载"}},[a._v("#")]),a._v(" mount 挂载")]),a._v(" "),s("p",[a._v("系统默认挂载目录：/media\n手动挂载目录：/mnt\nsudo fdisk -l  查看所有磁盘设备，可以获取到设备名称\nsudo mount deviceName /mnt")]),a._v(" "),s("h3",{attrs:{id:"umount-卸载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#umount-卸载"}},[a._v("#")]),a._v(" umount 卸载")]),a._v(" "),s("p",[a._v("sudo umount 挂载点")]),a._v(" "),s("h2",{attrs:{id:"压缩包管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#压缩包管理"}},[a._v("#")]),a._v(" 压缩包管理")]),a._v(" "),s("h3",{attrs:{id:"gzip-gz"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gzip-gz"}},[a._v("#")]),a._v(" gzip -- .gz")]),a._v(" "),s("p",[a._v("gzip gunzip")]),a._v(" "),s("h3",{attrs:{id:"bzip2-bz2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bzip2-bz2"}},[a._v("#")]),a._v(" bzip2 -- .bz2")]),a._v(" "),s("p",[a._v("bzip2 bunzip2\n以上两种压缩方式无法压缩目录，只能压缩文件")]),a._v(" "),s("h3",{attrs:{id:"tar"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tar"}},[a._v("#")]),a._v(" tar")]),a._v(" "),s("p",[a._v("tar zcvf xxx.tar.gz xxx\ntar zxvf xxx.tar.gz -C 解压到的目录")]),a._v(" "),s("h3",{attrs:{id:"rar"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rar"}},[a._v("#")]),a._v(" rar")]),a._v(" "),s("p",[a._v("打包：把dir压缩成newdir.rar\nrar a -r newdir dir\n解包：把newdir.rar解压缩到当前目录\nunrar x newdir.rar [解压缩目录]")]),a._v(" "),s("h3",{attrs:{id:"zip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zip"}},[a._v("#")]),a._v(" zip")]),a._v(" "),s("p",[a._v("打包：\nzip -r dir.zip dir\n解包：\nunzip dir.zip -d 解压目录")]),a._v(" "),s("h2",{attrs:{id:"进程管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程管理"}},[a._v("#")]),a._v(" 进程管理")]),a._v(" "),s("h3",{attrs:{id:"who"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#who"}},[a._v("#")]),a._v(" who")]),a._v(" "),s("p",[a._v("查看当前在线用户的情况，登录的用户名、使用的设备终端pts、登录到系统的时间\ntty设备\ntty1-tty6表示文字界面\ntty7 图形界面")]),a._v(" "),s("h3",{attrs:{id:"ps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ps"}},[a._v("#")]),a._v(" ps")]),a._v(" "),s("p",[a._v("-a：即all，查看当前系统所有用户的所有进程\n-u：查看进程所有者及其他一些详细信息\n-x：显示没有控制终端的进程\n-e 显示所有进程。\n-f 全格式。\nps aux | grep xxx")]),a._v(" "),s("h3",{attrs:{id:"kill"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kill"}},[a._v("#")]),a._v(" kill")]),a._v(" "),s("p",[a._v("kill -l查看所有信号，共64个信号\nkill -SIGKILL pid\nkill -9 pid")]),a._v(" "),s("h3",{attrs:{id:"env"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#env"}},[a._v("#")]),a._v(" env")]),a._v(" "),s("p",[a._v("查看当前进程的环境变量")]),a._v(" "),s("ul",[s("li",[a._v("vim ∼/.bashrc\n配置当前用户环境变量")]),a._v(" "),s("li",[a._v("vim /etc/profile\n配置系统环境变量,配置时需要有root权限\nexport PATH=$PATH:新路径")])]),a._v(" "),s("h3",{attrs:{id:"top"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#top"}},[a._v("#")]),a._v(" top")]),a._v(" "),s("p",[a._v("查看任务管理器")]),a._v(" "),s("h2",{attrs:{id:"网络管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络管理"}},[a._v("#")]),a._v(" 网络管理")]),a._v(" "),s("h3",{attrs:{id:"ifconfig"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ifconfig"}},[a._v("#")]),a._v(" ifconfig")]),a._v(" "),s("p",[a._v("1.查看网卡信息\nifconfig\n2.关闭网卡\nsudo ifconfig eth0 down\n3.开启网卡eth0\nsudo ifconfig eth0 up\n4.给eth0配置临时IP\nsudo ifconfig eth0 IP")]),a._v(" "),s("h3",{attrs:{id:"ping"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ping"}},[a._v("#")]),a._v(" ping")]),a._v(" "),s("p",[a._v("ping [选项] 主机名/IP地址\n-c 数目 在发送指定数目的包后停止。\n-d 设定SO_DEBUG的选项。\n-f 大量且快速地送网络封包给一台机器，看它的回应。\n-I 秒数 设定间隔几秒送一个网络封包给一台机器，预设值是一秒送一次。\n-l 次数 在指定次数内，以最快的方式送封包数据到指定机器（只有超级用户可以使用此选项）。\n-q 不显示任何传送封包的信息，只显示最后的结果。\n-r 不经由网关而直接送封包到一台机器，通常是查看本机的网络接口是否有问题。\n-s 字节数 指定发送的数据字节数，预设值是56，加上8字节的ICMP头，一共是64ICMP数据字节。")]),a._v(" "),s("h3",{attrs:{id:"nslookup"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nslookup"}},[a._v("#")]),a._v(" nslookup")]),a._v(" "),s("p",[a._v("nslookup name\n查询一台机器的IP地址和其对应的域名")]),a._v(" "),s("h3",{attrs:{id:"netstat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#netstat"}},[a._v("#")]),a._v(" netstat")]),a._v(" "),s("p",[a._v("netstat [选项]\n显示网络连接、路由表和网络接口信息，可以让用户得知目前都有哪些网络连接正在运\n作。命令中各选项的含义如下：\n-a 显示所有socket，包括正在监听的。\n-c 每隔1秒就重新显示一遍，直到用户中断它。\n-i 显示所有网络接口的信息，格式同“ifconfig -e”。\n-n 以网络IP地址代替名称，显示出网络连接情形。\n-r 显示核心路由表，格式同“route -e”。\n-t 显示TCP协议的连接情况。\n-u 显示UDP协议的连接情况。\n-v 显示正在进行的工作。")]),a._v(" "),s("h3",{attrs:{id:"lsof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lsof"}},[a._v("#")]),a._v(" lsof")]),a._v(" "),s("p",[a._v("lsof -i:80 查看80端口是否被占用")]),a._v(" "),s("h2",{attrs:{id:"用户管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用户管理"}},[a._v("#")]),a._v(" 用户管理")]),a._v(" "),s("p",[a._v("sudo useradd name\npasswd name\nsudo userdel -r name")]),a._v(" "),s("h2",{attrs:{id:"服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务"}},[a._v("#")]),a._v(" 服务")]),a._v(" "),s("h3",{attrs:{id:"ssh"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ssh"}},[a._v("#")]),a._v(" ssh")]),a._v(" "),s("p",[a._v("1.安装ssh服务器\nsudo apt-get install openssh-server\n2.远程登陆\nssh 用户名@IP")]),a._v(" "),s("h3",{attrs:{id:"scp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scp"}},[a._v("#")]),a._v(" scp")]),a._v(" "),s("p",[a._v("远程拷贝文件,scp -r 的常用方法：\n1.使用该命令的前提条件要求目标主机已经成功安装openssh-server\n如没有安装使用 sudo apt-get install openssh-server 来安装\n2.使用格式：\nscp -r 目标用户名@目标主机IP地址：/目标文件的绝对路径 /保存到本机的绝对/相对路径")]),a._v(" "),s("h2",{attrs:{id:"其他命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他命令"}},[a._v("#")]),a._v(" 其他命令")]),a._v(" "),s("h3",{attrs:{id:"man"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#man"}},[a._v("#")]),a._v(" man")]),a._v(" "),s("p",[a._v("1 可执行程序或shell命令\n2 系统调用（内核提供的函数）\n3 库文件（程序库中的函数）  查函数\nman man\nman read 查看read命令的man page\nman 2 read 查看read系统函数的man page(在第二个section中，表示为read(2))\nman -k read 以read为关键字查找相关的man page")]),a._v(" "),s("h3",{attrs:{id:"data-d-timestamp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data-d-timestamp"}},[a._v("#")]),a._v(" data -d@timestamp")]),a._v(" "),s("h2",{attrs:{id:"vim"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vim"}},[a._v("#")]),a._v(" vim")]),a._v(" "),s("h3",{attrs:{id:"命令模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令模式"}},[a._v("#")]),a._v(" 命令模式：")]),a._v(" "),s("p",[a._v("h - 左; j - 下; k - 上; l - 右;\n0 - 行首; $ - 行尾\ngg - 文件首行； G - 文件末行; 跳转到第n行 - nG;")]),a._v(" "),s("p",[a._v("删除光标所在的字符 - x;\n删除光标前的字符 - X;\n删除一个单词 - dw;\n删除光标所在行的前面 - d0;\n删除光标所在行的后面 - d$ / D;\n删除光标所在行 - dd;\n删除n行 - ndd;")]),a._v(" "),s("p",[a._v("撤销 - u;\n反撤销 - ctrl+r;")]),a._v(" "),s("p",[a._v("复制 - yy;\n复制n行 - nyy;\np: 在光标所在位置向下新开辟一行,粘贴\nP: 在光标所在行粘贴")]),a._v(" "),s("p",[a._v("查找 - /xxx 从光标位置向下查找 下一个 - n  上一个 - N\n?xxx 从光标位置向上查找\n移到需要查找的单词位置，按#")]),a._v(" "),s("p",[a._v("向右缩进 - >>\n向左缩进 - <<")]),a._v(" "),s("p",[a._v("文本中查看函数定义(man文档)  K , 3K(跳到第三章)")]),a._v(" "),s("h3",{attrs:{id:"可视模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可视模式"}},[a._v("#")]),a._v(" 可视模式")]),a._v(" "),s("p",[a._v("比如复制行中一部分内容，需要用可视模式\n命令模式 v -> 可视模式\n复制 - y;\n删除 - d;")]),a._v(" "),s("h3",{attrs:{id:"编辑模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编辑模式"}},[a._v("#")]),a._v(" 编辑模式")]),a._v(" "),s("p",[a._v("命令模式 i/a/o/s/I/A/O/S--\x3e 编辑模式\na: 光标后插入字符\nA: 插入行未\ni: 光标前插入字符\nI: 插入行首\no: 向下新开一行,插入行首\nO: 向上新开一行,插入行首")]),a._v(" "),s("h3",{attrs:{id:"末行模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#末行模式"}},[a._v("#")]),a._v(" 末行模式")]),a._v(" "),s("p",[a._v("命令模式 :--\x3e 末行模式\n跳转到指定行 :n\n替换光标所在行的所有oldword 😒/oldword/newword/g\n替换文本中所有oldword :%s/oldword/newword/g\n替换指定行的所有oldword :27,30s/oldword/neword/g   27到30行\n执行命令cmd :!cmd")]),a._v(" "),s("h3",{attrs:{id:"vi分屏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vi分屏"}},[a._v("#")]),a._v(" vi分屏")]),a._v(" "),s("p",[a._v("上下分屏 :sp [filename]\n左右分屏 :vsp [filename]\n在多个窗口切换  Ctr+w+w\n:qall\n:wqall")]),a._v(" "),s("p",[a._v("vimrc是vim的配置文件，可以修改两个位置")]),a._v(" "),s("ol",[s("li",[a._v("系统级配置文件目录 /etc/vim/vimrc")]),a._v(" "),s("li",[a._v("用户级配置文件目录 ~/.vimrc\n~/.vimrc优先级高")])]),a._v(" "),s("h2",{attrs:{id:"gcc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gcc"}},[a._v("#")]),a._v(" gcc")]),a._v(" "),s("p",[a._v("-I 指定头文件目录\n-D DEBUG 编译时指定宏\n-On n=0∼3 编译优化，n越大优化得越多\n-Wall 输出警告信息\n-g 包含调试信息（gdb调试的时候必须添加此参数）")]),a._v(" "),s("h2",{attrs:{id:"静态库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态库"}},[a._v("#")]),a._v(" 静态库")]),a._v(" "),s("p",[a._v("将生成的.o文件打包 ar rcs libmytest.a test.o\n静态库创建成功后，需要链接到应用程序中使用。使用gcc的-l选项来指定静态库，使用-L参数来指定库文件的搜索路径。\ngcc main.c lib/libMytest.a -Iinclude -o app\ngcc main.c -Iinclude -L lib -l Mytest -o app")]),a._v(" "),s("p",[a._v("制作静态库\ngcc -c add.c sub.c mul.c dive.c\nar rcs libmycal.a add.o sub.o mul.o dive.o")]),a._v(" "),s("p",[a._v("nm libmycal.a  查看静态库有什么内容\nnm app  查看可执行文件中的内容")]),a._v(" "),s("h2",{attrs:{id:"共享库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#共享库"}},[a._v("#")]),a._v(" 共享库")]),a._v(" "),s("p",[a._v("gcc -c -fPIC add.c sub.c mul.c dive.c (-fPIC生成与位置无关的的.o)\ngcc -shared -o libmycal.so *.o")]),a._v(" "),s("p",[a._v("gcc main.c -I include -L lib -l mycal -o myapp\n加载共享库方法：\n1.拷贝自己制作的共享库到/lib或者/usr/lib\n2.临时设置LD_LIBRARY_PATH, export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:库路径\n3.永久设置，把export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:库路径 设置到∼/.bashrc或者/etc/profile  设置后需要重新打开终端才能生效\n4.设置/etc/ld.so.conf, 把库所在路径追加到此配置文件里")]),a._v(" "),s("p",[a._v("修改/etc/ld.so.conf\nsudo vi /etc/ld.so.conf\n添加你的共享库路径\n更新查找共享库的路径\nsudo ldconfig -v")]),a._v(" "),s("h2",{attrs:{id:"gdb调试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gdb调试"}},[a._v("#")]),a._v(" gdb调试")]),a._v(" "),s("p",[a._v("加-g 编译 ---\x3e gdb xxx"),s("br"),a._v("\ngdb app\nl [file][:n|function]\nl 继续列出之后的内容\nb 22           断点\nb 15 if i==15  条件断点\ni              查看断点信息\np *数组名@10 列出数组前10个元素值\np 数组名[n]@m 从下标n开始向后打印m个元素。")]),a._v(" "),s("p",[a._v("| 命令 | 简写 | 作用 |\n|---------------------+------+------------------------------------------------------|\n| list | l | 查看代码，可跟行号和函数名 |\n| break | b | 设置断点，可根据行号和函数名 |\n| info | i | 查看GDB内部局部变量的数值,info breakpoints |\n| run  | r | 全速运行程序 |\n| start|   | 单步执行，运行程序，停在第一行执行语句 |\n| next | n | 逐过程执行 |\n| continue | c | 继续全速运行剩下的代码 |\n| print | p | 打印变量和地址 |\n| step | s | 逐语句执行，遇到函数，跳到函数内执行 |\n| ptype|   | 查看变量类型         |\n| display | | 设置观察变量 |\n| undisplay | | 取消观察变量 |\n|           | u|跳出当前循环|\n|finish     |  |跳出当前函数|\n| d | | 删除断点 |\n| set | | 设置变量的值 set var n=100 |\n| quit | q | 退出gdb |\n| run | r | 全速运行程序 |")]),a._v(" "),s("h2",{attrs:{id:"makefile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#makefile"}},[a._v("#")]),a._v(" makefile")]),a._v(" "),s("ol",[s("li",[a._v("一个规则\n三要素：目标、依赖、命令\n目标:依赖\n命令")])]),a._v(" "),s("ul",[s("li",[a._v("第一条规则是用来生成中级目标的规则\n如果规则中的依赖不存在，向下寻找其他的规则\n更新机制：比较目标时间和依赖文件的时间")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("两个函数")])]),a._v(" "),s("ul",[s("li",[a._v("查找指定目录下指定类型的文件\nsrc=$(wildcard /aa/*.c)")]),a._v(" "),s("li",[a._v("匹配替换函数\nobj=$(pasubst %.c %.o, $(src))")])]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("三个自动变量（只能在命令中使用）")])]),a._v(" "),s("ul",[s("li",[a._v("$@ 规则中的目标")]),a._v(" "),s("li",[a._v("$< 规则中的第一个依赖")]),a._v(" "),s("li",[a._v("$^ 规则中的所有依赖")])]),a._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[a._v("模式规则\n%.o:%.c\ngcc -c $^ -o $@")]),a._v(" "),s("li",[a._v("clean")])]),a._v(" "),s("p",[a._v("windows命令")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1729660",target:"_blank",rel:"noopener noreferrer"}},[a._v("netsh"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);