(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{424:function(t,s,a){"use strict";a.r(s);var e=a(46),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("版本控制系统——只能跟踪文本文件的修改，而非文件，建议用VSCode代替笔记本")]),t._v(" "),a("h4",{attrs:{id:"创建版本库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建版本库"}},[t._v("#")]),t._v(" 创建版本库")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#将目录变成可以被git管理的仓库")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#将文件添加到仓库  暂存区")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"描述性信息"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#将文件提交到仓库  由暂存区提交到HEAD")]),t._v("\n")])])]),a("h4",{attrs:{id:"时光穿梭机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时光穿梭机"}},[t._v("#")]),t._v(" 时光穿梭机")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看仓库当前的状态")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看当前文件与上一次提交的区别")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#显示最近到最远的提交记录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  HEAD #表示当前版本的提交码，HEAD^ #表示上一次提交版本码，HEAD^^ #表示上上一次，若为100次前的版本，简写为HEAD~100")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD^ "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#表示版本回退到上一次提交的版本，也可以不用HEAD来表示，直接写提交码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#打印git记录的每一次提交和reset的命令记录，其中包括每一次命令导致的提交码，这样可以根据这个提交码进行恢复")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" HEAD -- readme.txt "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#命令可以查看工作区和版本库里面最新版本")]),t._v("\n")])])]),a("h4",{attrs:{id:"工作区和暂存区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作区和暂存区"}},[t._v("#")]),t._v(" 工作区和暂存区")]),t._v(" "),a("p",[t._v("电脑中的目录是工作区，工作区有一个隐藏目录.git，是git版本库")]),t._v(" "),a("p",[t._v("git版本库中存有称为stage的暂存区，git为我们自动创建的第一个分支master，以及指向master的一个指针HEAD。")]),t._v(" "),a("h4",{attrs:{id:"撤销修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改"}},[t._v("#")]),t._v(" 撤销修改")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -- "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#放弃<file>在工作区的修改，如果暂存区有暂存修改，则回归到暂存区保存的状态，如果暂存区没有保存的修改，则回归到HEAD")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#放弃<file>暂存区的修改")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#从版本库中删除<file>,再提交")]),t._v("\n")])])]),a("h4",{attrs:{id:"远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库"}},[t._v("#")]),t._v(" 远程仓库")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin https://gitee.com/agnes001/learngit.git "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#关联到远程库")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin master "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#第一次推送master分支的所有内容")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#后续推送用此命令，将本地master分支的最新修改推送至远程仓库")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程仓库地址"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#从远程仓库克隆")]),t._v("\n")])])]),a("h4",{attrs:{id:"创建与合并分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建与合并分支"}},[t._v("#")]),t._v(" 创建与合并分支")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" / "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" switch -c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#创建并切换到<name>分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#创建<name>分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" / "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" switch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#切换到<name>分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看所有分支，结果中带×号的表示是当前分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#合并<name>分支到当前分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#删除<name>分支")]),t._v("\n")])])]),a("h4",{attrs:{id:"解决冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决冲突"}},[t._v("#")]),t._v(" 解决冲突")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("在合并两个分支时，如果有冲突，就必须先解决冲突，再向前进行一次提交，然后进行合并\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --graph --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline --abbrev-commit （git log --graph 可以看到分支合并图）\n")])])]),a("h4",{attrs:{id:"分支管理策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支管理策略"}},[t._v("#")]),t._v(" 分支管理策略")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("通常，合并分支时，Git会尽可能的使用Fast forward模式，即只更改分支的指针指向，但这会带来一个问题，在分支上的提交，在合并后，把分支删除后，会丢掉分支信息。在merge时使用--no-ff，Git在merge时就会生成一个新的commit，然后merge到该commit上\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --no-ff -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"描述"')]),t._v(" dev\n")])])]),a("p",[t._v("分支策略")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；")])]),t._v(" "),a("li",[a("p",[t._v("干活都在"),a("code",[t._v("dev")]),t._v("分支上，也就是说，"),a("code",[t._v("dev")]),t._v("分支是不稳定的，到某个时候，比如1.0版本发布时，再把"),a("code",[t._v("dev")]),t._v("分支合并到"),a("code",[t._v("master")]),t._v("上，在"),a("code",[t._v("master")]),t._v("分支发布1.0版本；")])]),t._v(" "),a("li",[a("p",[t._v("你和你的小伙伴们每个人都在"),a("code",[t._v("dev")]),t._v("分支上干活，每个人都有自己的分支，时不时地往"),a("code",[t._v("dev")]),t._v("分支上合并就可以了。")])])]),t._v(" "),a("h4",{attrs:{id:"bug分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bug分支"}},[t._v("#")]),t._v(" Bug分支")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("当在dev分支干活时，突然被告知master分支上有个bug issue1需要被修复，但由于dev下的工作还未完成不能提交，此时\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#存储工作现场")]),t._v("\n然后切换到master分支，新建一个issue-1分支，修改完毕后，将其合并到master分支，然后删除issue-1分支，最后切换到dev分支，\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看所有保存的工作现场")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#恢复最后一个工作现场，并将其从工作现场保存列表中删除")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("工作现场序号"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#恢复工作现场，如：stash@{0} 但不删除保存的工作现场")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash drop "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("工作现场序号"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#删除保存的工作现场")]),t._v("\n\n在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("命令，把bug提交的修改“复制”到当前分支，避免重复劳动。\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick 4c805e2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#复制一个特定的提交到当前分支")]),t._v("\n")])])]),a("h4",{attrs:{id:"多人协作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多人协作"}},[t._v("#")]),t._v(" 多人协作")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看远程库的信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#显示更详细的信息，如果没有推送权限，就看不到push的地址")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#从本地推送分支到远程")]),t._v("\n\n从远程库clone时，默认只能看到本地的master分支，如果要在dev分支上开发，需要创建远程origin的dev分支到本地\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" origin/"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#在本地创建和远程分支对应的分支")]),t._v("\n如果推送失败，就说明远程的版本比本地的新，就\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#抓取远程的新提交到本地")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("origin/dev dev "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#设置dev和origin/dev进行链接")]),t._v("\n本地解决冲突，合并后，再提交和push\n")])])]),a("h4",{attrs:{id:"标签管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标签管理"}},[t._v("#")]),t._v(" 标签管理")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("标签是版本库的一个快照，它就是一个指向commit的指针，区别在于分支可以移动，而标签不可以移动，既然有了commit，为什么要有标签？如果有个标签叫v1.1，某一天，我们需要打包发布某个提交，就可以用v1.1，而不是一串字母数字了。所以，Tag就是一个有意义的名字，和一个commit绑定\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tag-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#创建标签")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看所有标签")]),t._v("\n\n默认创建的标签打在最近的一次提交上\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline --abbrev-commit "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看提交记录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tag-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit-id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#在某一次提交上打标签")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tag-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#标签不是按照时间顺序列出，而是按照字母顺序列出，查看标签的详细信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tag-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"描述"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit-id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#创建带有说明的标签，-a指定标签名，-m指定标签信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tag-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#删除标签")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tag-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#创建的标签都储存在本地，不会自动推送到远端，将标签推送到远端")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin --tags "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#一次性推送所有尚未推送到远程的本地标签")]),t._v("\n如果要删除远端已提交的标签，就先删除本地标签，然后用如下命令\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin :ref/tags/"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tag-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("h4",{attrs:{id:"自定义git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义git"}},[t._v("#")]),t._v(" 自定义git")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("git显示颜色，让关键信息更醒目\ngit config --global color.ui true\n")])])]),a("h4",{attrs:{id:"忽略特殊文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#忽略特殊文件"}},[t._v("#")]),t._v(" 忽略特殊文件")]),t._v(" "),a("p",[t._v("有时候，我们必须把某些文件放到Git工作目录中，但是我们又不能提交他们，比如保存了数据库密码的配置文件等等，每次用git status都会提示未跟踪的文件，有强迫症的人肯定受不了。可以在Git工作目录创建一个特殊文件.gitignore\n忽略文件的原则是：\n1.忽略操作系统自动生成的文件，比如缩略图等；\n2.忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；\n3.忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("该文件中以#开头的为注释，*.exe表示忽略以exe为后缀的文件，dist表示忽略名字为dist的目录，ab[cde].ini表示忽略abc.ini、abd.ini、abe.ini文件，然后将.gitignore文件也一并提交到仓库就可以了\n\ngit add -f app.class 表示强行将被忽略的app.class文件加入git的追踪\n如果发现可能是由于.gitignore文件写的有问题导致有文件提交不上去，可以通过下述命令检查\ngit check-ignore -v <file>\t\n")])])]),a("h4",{attrs:{id:"搭建git服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搭建git服务器"}},[t._v("#")]),t._v(" 搭建git服务器")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("收集所有需要登录用户的.pub公钥，把所有公钥导入到.ssh/authorized_keys文件里，一行一个\n选定一个目录作为Git仓库，假定是~/sample.git，在～目录下输入命令：\ngit init --bare sample.git\n然后就可以通过git克隆使用了\ngit clone git@192.168.1.7:/home/fenghaojie/sample.git\n公钥管理可以使用 gitosis\n权限管理可以使用 gitolite\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);