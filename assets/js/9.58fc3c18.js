(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{515:function(t,l,i){"use strict";i.r(l);var n=i(46),v=Object(n.a)({},(function(){var t=this,l=t.$createElement,i=t._self._c||l;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h2",{attrs:{id:"一个可执行程序占用的内存分为哪几个区"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#一个可执行程序占用的内存分为哪几个区"}},[t._v("#")]),t._v(" 一个可执行程序占用的内存分为哪几个区？")]),t._v(" "),i("ol",[i("li",[t._v("C语言在内存中一共分为如下几个区域，分别是：\n内存从低到高的分布")])]),t._v(" "),i("ul",[i("li",[t._v("命令行参数和环境变量")]),t._v(" "),i("li",[t._v("栈(从高地址往低地址增长): 局部变量／局部常量(const)[局部只读变量]／函数调用时返回地址／调用者的环境信息（例如某些机器寄存器）．\n"),i("ul",[i("li",[t._v("由编译器自动分配释放管理．")]),t._v(" "),i("li",[t._v("windows下，申请的栈空间一般为2MB。")]),t._v(" "),i("li",[t._v("Linux默认的栈空间是8MB，可以用ulimit -s 命令来修改。")])])]),t._v(" "),i("li",[t._v("堆(从低地址往高低至增长): 所使用的局部变量还是在栈上，内容则在堆上．手动释放或者程序结束时由操作系统释放回收．\n"),i("ul",[i("li",[t._v("由程序员分配[new/malloc/realloc/calloc]．")]),t._v(" "),i("li",[t._v("windows下， 申请的堆空间一般小于2GB。")])])]),t._v(" "),i("li",[t._v("未初始化数据段[.bbs]: 未初始化的全局变量／未初始化的（局部/全局）静态变量(static修饰的变量)．")]),t._v(" "),i("li",[t._v("初始化数据段: 初始化的全局变量／初始化的（局部/全局）静态变量(static修饰的变量)。")]),t._v(" "),i("li",[t._v("代码段[.text]: 存储机器码序列／全局常量／代码／字符串常量．")])]),t._v(" "),i("ol",{attrs:{start:"2"}},[i("li",[t._v("静态内存分配和动态内存分配\n一个程序被加载到内存中，这块内存首先就存在两种属性：静态分配内存和动态分配内存。\n静态分配内存：是在程序编译和链接时就确定好的内存。\n动态分配内存：是在程序加载、调入、执行的时候分配/回收的内存。")])])])}),[],!1,null,null,null);l.default=v.exports}}]);